library(tidyverse)
library(tidyverse)
# loading packages -------------------------------------------------------
setwd('C:/Users/Daniel/Documents/ipds_kr_R_book/ch08_classification/adult')
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally',
'ROCR', 'ISLR','glmnet', 'gbm', 'boot', 'randomForest', 'dummies',
'curl', 'gridExtra')
lapply(Packages, library, character.only=T)
# loading data ------------------------------------------------------------
adult <- read.csv("adult.data", header = F, strip.white = T)
names(adult) <- c("age", "workclass", "fnlwgt", "education", "education_num",
"marital_status", "occupation", "relationship", "race", "sex",
"capital_gain", "capital_loss", "hours_per_week", "native_country",
"wage")
adult %>% head()
# Define binomial_deviance function ---------------------------------------
binomial_deviance <- function(y_obs, yhat) {
epsilon = 0.0001
yhat = ifelse(yhat < epsilon, epsilon, yhat)
yhat = ifelse(yhat > 1- epsilon, 1-epsilon, yhat)
a = ifelse(y_obs == 0, 0, y_obs * log(y_obs/yhat))
b = ifelse(y_obs==1, 0, (1-y_obs) * log((1-y_obs)/(1-yhat)))
return((2*sum(a+b)))
}
# -------------------------------------------------------------------------
xx <- model.matrix(wage ~.-1, adult)
x <- xx[training_idx, ]
x
y <- ifelse(training$wage == ">50K", 1, 0)
dim(x)
# -------------------------------------------------------------------------
xx <- model.matrix(wage ~.-1, adult)
x <- xx[training_idx, ]
setwd('C:/Users/Daniel/Documents/ipds_kr_R_book/ch08_classification/adult')
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally',
'ROCR', 'ISLR','glmnet', 'gbm', 'boot', 'randomForest', 'dummies',
'curl', 'gridExtra')
lapply(Packages, library, character.only=T)
adult <- read.csv("adult.data", header = F, strip.white = T)
names(adult) <- c("age", "workclass", "fnlwgt", "education", "education_num",
"marital_status", "occupation", "relationship", "race", "sex",
"capital_gain", "capital_loss", "hours_per_week", "native_country",
"wage")
adult %>% head()
glimpse(adult)
summary(adult)
levels(adult$wage)
# fct형 변수
# workclass, marital_status, occupation, relationship, race, sex, native_country, wage...
x <- model.matrix(~ race + sex + age, adult)
# glimpse(x)
class(x)
x <- x %>% as.data.frame() %>% as_tibble()
x %>% glimpse()
colnames(x)
model.matrix(~ . -wage, adult ) %>% as.data.frame() %>% as_tibble() -> x
dim(x)
# splitting data :: train:validation:test = 60:20:20
# why validation?? to find a proper model of trained models...
set.seed(2019)
n <- nrow(adult)
idx <- 1:n
training_idx <- sample(idx, n * .6)
idx <- setdiff(idx, training_idx) # reflesh idx...
validate_idx <- sample(idx, n * .2)
test_idx <- setdiff(idx, validate_idx)
length(training_idx)
length(validate_idx)
length(test_idx)
training <- adult[training_idx, ]
validation <- adult[validate_idx, ]
test <- adult[test_idx, ]
library(tidyverse)
# loading packages -------------------------------------------------------
setwd('C:/Users/Daniel/Documents/ipds_kr_R_book/ch08_classification/adult')
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally',
'ROCR', 'ISLR','glmnet', 'gbm', 'boot', 'randomForest', 'dummies',
'curl', 'gridExtra')
lapply(Packages, library, character.only=T)
# loading data ------------------------------------------------------------
adult <- read.csv("adult.data", header = F, strip.white = T)
names(adult) <- c("age", "workclass", "fnlwgt", "education", "education_num",
"marital_status", "occupation", "relationship", "race", "sex",
"capital_gain", "capital_loss", "hours_per_week", "native_country",
"wage")
adult %>% head()
# Define binomial_deviance function ---------------------------------------
binomial_deviance <- function(y_obs, yhat) {
epsilon = 0.0001
yhat = ifelse(yhat < epsilon, epsilon, yhat)
yhat = ifelse(yhat > 1- epsilon, 1-epsilon, yhat)
a = ifelse(y_obs == 0, 0, y_obs * log(y_obs/yhat))
b = ifelse(y_obs==1, 0, (1-y_obs) * log((1-y_obs)/(1-yhat)))
return((2*sum(a+b)))
}
set.seed(2019)
n <- nrow(adult)
idx <- 1:n
training_idx <- sample(idx, n * .6)
idx <- setdiff(idx, training_idx) # reflesh idx...
validate_idx <- sample(idx, n * .2)
test_idx <- setdiff(idx, validate_idx)
length(training_idx)
length(validate_idx)
length(test_idx)
training <- adult[training_idx, ]
validation <- adult[validate_idx, ]
test <- adult[test_idx, ]
set.seed(2019)
ad_rf <- randomForest(wage ~ ., training)
ad_rf
plot(ad_rf)
tmp <- importance(ad_rf)
tmp %>% class()
tmp %>%
as.data.frame() %>%
mutate(var = rownames(.)) %>%
as_tibble() -> tmp.1
colnames(tmp.1) <- c("mean_gini_desc", "var")
tmp.1 %>%
select(var, mean_gini_desc)
tmp.1 %>%
select(var, mean_gini_desc) %>%
arrange(mean_gini_desc)
tmp.1 %>%
select(var, mean_gini_desc) %>%
arrange(desc(mean_gini_desc))
varImpPlot(ad_rf)
predict(ad_rf, newdata = adult[1:5, ])
predict(ad_rf, newdata = adult[1:5, ], type = "prob")
yhat_rf <- predict(ad_rf, newdata = validation, type = 'prob')[, '>50K']
yhat_rf
binomial_deviance(y_obs, yhat_rf)
test
y_obs <- test$wage
binomial_deviance(y_obs, yhat_rf)
y_obs <- ifelse(validation$age == ">50K", 1, 0)
y_obs
y_obs <- ifelse(validation$wage == ">50K", 1, 0)
y_obs
binomial_deviance(y_obs, yhat_rf)
pred_rf <- prediction(yhat_rf, y_obs)
pred_rf
perf_rf <- performance(pred_rf, measure = "tpr", x.measure = 'fpr')
perf_rf
plot(perf_lm, col = 'black', main = 'ROC Curve')
plot(perf_glmnet, col = 'black', main = 'ROC Curve')
source('~/ipds_kr_R_book/ch08_classification/adult/adult_glmnet.R', echo=TRUE)
perf_glmnet
perf_glmnet %>% plot(col = 'black')
perf_glmnet %>% plot(col = 'black', main = 'ROC Curve')
perf_tr %>% plot(col = 'blue', add = T)
perf_tr
perf_tr
pred_tr <- prediction(yhat_tr, y_obs)
cvr_tr <- rpart(wage ~ ., data = training)
cvr_tr
printcp(cvr_tr)
summary(cvr_tr)
opar <- par(mfrow = c(1, 1), xpd = NA)
plot(cvr_tr)
text(cvr_tr, use.n = T)
par(opar)
yhat_tr <- predict(cvr_tr, validation)
yhat_tr <- yhat_tr[, ">50K"]
binomial_deviance(y_obs, yhat_tr)
pred_tr <- prediction(yhat_tr, y_obs)
perf_tr <- performance(pred_tr, measure = 'tpr', x.measure = 'fpr')
plot(perf_lm, col = 'black', main = "ROC Curve")
plot(perf_tr, col = 'blue', add = T)
abline(0, 1)
legend('bottomright', inset = .1,
legend = c("GLM", "Tree"),
col = c("black", "blue"),
lty = 1, lwd = 2)
performance(pred_tr, "auc")@y.values[[1]]
perf_glmnet %>% plot(col = 'black', main = 'ROC Curve')
perf_tr %>% plot(col = 'blue', add = T)
perf_rf %>% plot(col = 'red', add = T)
abline(0, 1)
legend('bottomright', inset=.1,
legend = c("GLM", "glmnet", "RF"),
col = c('black', 'blue', 'red'), lty = 1, lwd = 2)
performance(perf_glmnet, "auc")@y.values[[1]]
performance(pred_glmnet, "auc")@y.values[[1]]
performance(pred_tr, "auc")@y.values[[1]]
performance(pred_rf, "auc")@y.values[[1]]
data.frame(yhat_glmnet. yhat_rf) %>%
ggplot(aes(yhat_glmnet, yhat_rf)) +
geom_point(alpha=.5) +
geom_smooth()
data.frame(yhat_glmnet. yhat_rf) %>%
ggplot(aes(yhat_glmnet, yhat_rf)) +
geom_point(alpha=.5) +
geom_smooth()
data.frame(yhat_glmnet, yhat_rf) %>%
ggplot(aes(yhat_glmnet, yhat_rf)) +
geom_point(alpha=.5) +
geom_smooth()
data.frame(yhat_glmnet, yhat_rf) %>%
ggplot(aes(yhat_glmnet, yhat_rf)) +
geom_point(alpha=.5) +
geom_smooth(method = 'gam')
data.frame(yhat_glmnet, yhat_rf) %>%
ggplot(aes(yhat_glmnet, yhat_rf)) +
geom_point(alpha=.5) +
geom_smooth(method = 'gam') -> p1
reshape2::melt(data.frame(yhat_glmnet, yhat_rf))
data.frame(yhat_glmnet, yhat_rf)
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`)
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`) %>% head()
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`, key = "variable", value = "value") %>% head()
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`, key = "variable", value = "value") %>%
ggplot(aes(variable, fill = variable)) +
geom_density(alpha = .5)
reshape2::melt(data.frame(yhat_glmnet, yhat_rf)) %>% head(50)
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`, key = "variable", value = "value") %>% head(50)
reshape2::melt(data.frame(yhat_glmnet, yhat_rf)) -> df.1
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`, key = "variable", value = "value") -> df.2
identical(df.1, df.2)
data.frame(yhat_glmnet, yhat_rf) %>%
gather(key = "variable", value = "value") -> df.2
identical(df.1, df.2)
df.2
df.1$value[1:10]
df.2$value[1:10]
identical(df.1$value, df.2$value)
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`, key = "variable", value = "value") -> df.3
df.3$value[1:10]
identical(df.1$value, df.3$value)
yhat_rf <- predict(ad_rf, newdata = validation, type = 'prob')[, '<=50K']
y_obs <- ifelse(validation$wage == ">50K", 1, 0)
binomial_deviance(y_obs, yhat_rf)
pred_rf <- prediction(yhat_rf, y_obs)
perf_rf <- performance(pred_rf, measure = "tpr", x.measure = 'fpr')
perf_glmnet %>% plot(col = 'black', main = 'ROC Curve')
perf_tr %>% plot(col = 'blue', add = T)
perf_rf %>% plot(col = 'red', add = T)
yhat_rf <- predict(ad_rf, newdata = validation, type = 'prob')[, '>50K']
y_obs <- ifelse(validation$wage == ">50K", 1, 0)
binomial_deviance(y_obs, yhat_rf)
pred_rf <- prediction(yhat_rf, y_obs)
perf_rf <- performance(pred_rf, measure = "tpr", x.measure = 'fpr')
perf_glmnet %>% plot(col = 'black', main = 'ROC Curve')
perf_tr %>% plot(col = 'blue', add = T)
perf_rf %>% plot(col = 'red', add = T)
abline(0, 1)
legend('bottomright', inset=.1,
legend = c("GLM", "glmnet", "RF"),
col = c('black', 'blue', 'red'), lty = 1, lwd = 2)
performance(pred_glmnet, "auc")@y.values[[1]]
performance(pred_tr, "auc")@y.values[[1]]
performance(pred_rf, "auc")@y.values[[1]]
data.frame(yhat_glmnet, yhat_rf) %>%
ggplot(aes(yhat_glmnet, yhat_rf)) +
geom_point(alpha=.5) +
geom_smooth(method = 'gam') -> p1
reshape2::melt(data.frame(yhat_glmnet, yhat_rf)) -> df.1
data.frame(yhat_glmnet, yhat_rf) %>%
gather(key = "variable", value = "value") -> df.2
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`, key = "variable", value = "value") -> df.3
df.1$value[1:10]
df.2$value[1:10]
df.3$value[1:10]
identical(df.1$value, df.2$value)
identical(df.1$value, df.3$value)
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`, key = "variable", value = "value") %>%
ggplot(aes(variable, fill = variable)) +
geom_density(alpha = .5)
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`, key = "variable", value = "value") %>%
ggplot(aes(value, fill = variable)) +
geom_density(alpha = .5)
data.frame(yhat_glmnet, yhat_rf) %>%
gather(`yhat_glmnet`, `yhat_rf`, key = "variable", value = "value") %>%
ggplot(aes(value, fill = variable)) +
geom_density(alpha = .5)  -> p2
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
set.seed(2019)
adult_gbm <- training %>% mutate(wage = ifelse(wage == ">50K", 1, 0))
adult_gbm
ad_gbm <- gbm(wage ~ ., data = adult_gbm,
distribution = "bernoulli",
n.trees = 50000, cv.folds = 3,
verbose = T)
library(purrr)
means <- list(1, 2, 3)
sites <- list("noth", "west", "east")
list_of_files_map2 <- map2(sites, means,
~data.frame(sites = .x,
a = rnorm(mean = .y,
n = 200,
sd = (5/2))))
list_of_files_map2
list_of_files_map2 <- map2(sites, means,
~data.frame(sites = .x,
a = rnorm(mean = .y,
n = 10,
sd = (5/2))))
list_of_files_map2
pmapinputs <- list(sites = sites, means = means, sigma = sigma,
means2 = means2, sigma2 = sigma2)
sigma <- list(1, 2, 3)
means2 <- list(.5, 1, 1.5)
sigma2 <- list(.5, 1, 1.5)
pmapinputs <- list(sites = sites, means = means, sigma = sigma,
means2 = means2, sigma2 = sigma2)
pmapinputs
# Map over the master list...
list_of_files_pmap <- pmap(
pmapinputs,
function(sites, means, sigma, means2, sigma2)
data.frame(sites = sites,
a = rnorm(mean = means, n = 200, sd = sigma),
b = rnorm(mean = means2, n = 200, sd = sigma2))
)
list_of_files_pmap
# Map over the master list...
list_of_files_pmap <- pmap(
pmapinputs,
function(sites, means, sigma, means2, sigma2)
data.frame(sites = sites,
a = rnorm(mean = means, n = 5, sd = sigma),
b = rnorm(mean = means2, n = 5, sd = sigma2))
)
list_of_files_pmap
list_of_files_pmap
# safely()...
a <- list(-10, 1, 10, 0) %>%
map(safely(log, otherwise = NA_real_)) %>%
# Transpose the result...
transpose()
a
# safely()...
a <- list(-10, 1, 10, 0) %>%
map(safely(log, otherwise = NA_real_)) %>%
# Transpose the result...
transpose()
a
# safely()...
a <- list(-10, 1, 10, 0) %>%
map(safely(log, otherwise = NA_real_)) %>%
# Transpose the result...
transpose()
a
# safely()...
library(purrr)
a <- list(-10, 1, 10, 0) %>%
map(safely(log, otherwise = NA_real_)) %>%
# Transpose the result...
transpose()
a
a <- list(-10, 1, 10, 0) %>%
map(safely(log, otherwise = NA_real_)) %>%
transpose()
a
list(1, 10, 0) %>%
map(safely(log, otherwise = NA_real_))
list(1, 10, 0) %>%
map(log, otherwise = NA_real_)
list(1, 10, 0) %>%
map(log)
list(-10, 1, 10, 0) %>%
map(log)
list(-10, 1, 10, 0) %>%
map(log) %>%
transpose()
list(-10, 1, 10, 0) %>%
map(log) %>%
transpose() -> a
a
a <- list(-10, 1, 10, 0) %>%
map(safely(log, otherwise = NA_real_)) %>%
transpose()
a
rm(a)
# safely()...
library(purrr)
a <- list(-10, 1, 10, 0) %>%
map(safely(log, otherwise = NA_real_)) %>%
transpose()
a
# convert data to numeric with purrr...
data(sw_people)
# convert data to numeric with purrr...
data("sw_people")
