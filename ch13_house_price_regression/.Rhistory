)
data_from_db <- dbGetQuery(con_spam, "select * from spambase;")
data_from_db %>% colnames()
data_from_db %>% select(-row_names) -> data_spam
data_spam %>% glimpse()
data_spam %>% select(1:10, 58) %>% sample_n(500) -> data_tmp_1
library(GGally)
ggpairs(data_tmp_1)
data_spam %>% select(48:57, 58) %>% sample_n(500) -> data_tmp_2
ggpairs(data_tmp_2)
cor(data_spam[, -58], as.numeric(data_spam$class)) %>% as.data.frame() %>%
rename(cor = V1) -> tmp
tmp$var <- rownames(tmp)
tmp %>%
ggplot(aes(reorder(var, cor), cor)) +
geom_point() +
coord_flip()
library(gridExtra)
data_spam$class <- as.factor(data_spam$class)
data_spam %>% ggplot(aes(class)) + geom_bar() -> p1; p1
data_spam %>% ggplot(aes(class, `word_freq_$`)) +
geom_jitter(col = 'gray') + geom_boxplot(alpha = .5) + scale_y_sqrt() -> p2; p2
data_spam %>% ggplot(aes(`word_freq_$`, group=class, fill = class)) +
geom_density(alpha = .5) + scale_x_sqrt() + scale_y_sqrt() -> p3; p3
data_spam %>% ggplot(aes(class, capital_run_length_longest)) +
geom_jitter(col ='gray') +
geom_boxplot(alpha = .5) +
scale_y_log10() -> p4; p4
grid.arrange(p1, p2, p3, p4, ncol = 2)
library(randomForest)
old_names <- names(data_spam)
new_names <- make.names(old_names, unique = T)
cbind(old_names, new_names)[old_names != new_names, ]
names(data_spam) <- new_names
# Data Spliting -----------------------------------------------------------
nrow(data_spam) -> n
1:n %>% sample(., n*.6) -> train_idx
setdiff(1:n, train_idx) -> idx_without_train
idx_without_train %>% sample(., n*.2) -> validation_idx
setdiff(idx_without_train, validation_idx) -> test_idx
train_idx %>% length()
validation_idx %>% length()
test_idx %>% length()
train_data <- data_spam[train_idx, ]
validation_data <- data_spam[validation_idx, ]
test_data <- data_spam[test_idx, ]
lm_full <- glm(class ~., data = train_data, family = binomial)
summary(lm_full)
# Validation --------------------------------------------------------------
library(ROCR)
y_obs <- as.numeric(as.character(validation_data$class))
yhat_lm <- predict(lm_full, newdata = validation_data, type = 'response')
pred_lm <- prediction(yhat_lm, y_obs)
performance(pred_lm, "auc")@y.values[[1]]
binomial_deviance <- function(y_obs, yhat) {
epsilon = 0.0001
yhat = ifelse(yhat < epsilon, epsilon, yhat)
yhat = ifelse(yhat > 1- epsilon, 1-epsilon, yhat)
a = ifelse(y_obs == 0, 0, y_obs * log(y_obs/yhat))
b = ifelse(y_obs==1, 0, (1-y_obs) * log((1-y_obs)/(1-yhat)))
return((2*sum(a+b)))
}
binomial_deviance(y_obs, yhat_lm)
xx <- model.matrix(class ~.-1, data_spam)
xx
x <- xx[training_idx, ]
x <- xx[train_idx, ]
x
y <- as.numeric(as.character(training$class))
glimpse(x)
y <- as.numeric(as.character(train_data$class))
x <- xx[train_idx, ]
x
y <- as.numeric(as.character(train_data$class))
glimpse(x)
data_cvfit <- cv.glmnet(x, y, family = "binomial")
Packages <- c("MASS", "glmnet", "randomForest", "gbm", "rpart",
"boot", "data.table", "ROCR", "gridExtra")
lapply(Packages, library, character.only = T)
data_cvfit <- cv.glmnet(x, y, family = "binomial")
plot(data_cvfit)
coef(data_cvfit, s = c("lambda.1se"))
coef(data_cvfit, s = c("lambda.mn"))
coef(data_cvfit, s = c("lambda.min"))
predict.cv.glmnet(data_cvfit, s = "lambda.min", newx = x[1:5, ], type = "response")
yhat_glmnet <- predict(data_cvfit, s= "lambda.min", newx = xx[validation_idx, ],
type = 'response')
yhat_glmnet <- yhat_glmnet[, 1]
yhat_glmnet
pred_glmnet <- prediction(yhat_glmnet, y_obs)
performance(pred_glmnet, "auc")@y.values[[1]]
binomial_deviance(y_obs, yhat_glmnet)
data_tr <- rpart(class ~., data = training)
data_tr <- rpart(class ~., data = train_data)
data_tr
printcp(data_tr)
summary(data_tr)
opar <- par(mfrow  = c(1, 1), xpd=NA)
plot(data_tr)
text(data_tr, use.n = t)
text(data_tr, use.n = T)
par(opar)
yhat_tr <- predict(data_tr, validation_data)
yhat_tr <- yhat_tr[, "1"]
yhat_tr
pred_tr <- prediction(yhat_tr, y_obs)
pred_tr
performance(predtr, "auc")@y.values[[1]]
performance(pred_tr, "auc")@y.values[[1]]
binomial_deviance(y_obsm yhat_tr)
binomial_deviance(y_obs, yhat_tr)
set.seed(2019)
data_rf <- randomForest(class ~., train_data)
data_rf
opar <- par(mfrow = c(1, 2))
plot(data_rf)
varImpPlot(data_rf)
par(opar)
yhat_rf <- predict(data_rf, newdata = validation, type = 'prob')[, '1']
yhat_rf <- predict(data_rf, newdata = validation_data, type = 'prob')[, '1']
yhat_rf
pred_rf <- prediction(yhat_rf, y_obs)
performance(pred_rf, "auc")@y.values[[1]]
binomial_deviance(y_obs, yhat_rf)
set.seed(2019)
data_for_gbm <- train_data %>%
mutate(class = as.numeric(as.character(class)))
data_gbm <- gbm(class ~., data = data_for_gbm, distribution = "bernouli",
n.trees=100000, cv.folds=3, verbose=T)
data_gbm <- gbm(class ~., data = data_for_gbm, distribution = "bernoulli",
n.trees=100000, cv.folds=3, verbose=T)
best_iter = gbm.perf(data_gbm, method="cv")
(best_iter= gbm.perf(data_gbm, method="cv"))
yhat_gbm <- predict(data_gbm, n.trees=best_iter, newdata=validation, type='response')
yhat_gbm <- predict(data_gbm, n.trees=best_iter, newdata=validation_data, type='response')
pred_gbm <- prediction(yhat_gbm, y_obs)
performance(pred_gbm, "auc")@y.valeus[[1]]
performance(pred_gbm, "auc")@y.values[[1]]
binomial_deviance(y_obs, yhat_gbm)
method = c('lm', 'glmnet', 'rf', 'gbm')
auc = c(performance(pred_glmnet, "auc")@y.values[[1]],
performance(pred_tr, "auc")@y.values[[1]],
performance(pred_rf, "auc")@y.values[[1]],
performance(pred_gbm, "auc")@y.values[[1]])
auc
bin_dev = c(binomial_deviance(y_obs, yhat_glmnet),
binomial_deviance(y_obs, yhat_tr),
binomial_deviance(y_obs, yhat_rf),
binomial_deviance(y_obs, yhat_gbm))
bin_dev
data.frame(method = method,
auc = auc,
bin_dev = bin_dev)
perf_lm <- performance(pred_lm, measure = "tpr", x.measure = "fpr")
perf_glmnet <- performance(pred_glmnet, measure = "tpr", x.measure = "fpr")
perf_rf <- preformance(pred_rf, measure="tpr", x.measure = "fpr")
perf_rf <- performance(pred_rf, measure="tpr", x.measure = "fpr")
perf_gbm <- performance(pred_gbm, measure = "tpr", x.measure = "fpr")
plot(perf_lm, col="black", main="ROC Curve")
plot(perf_glmnet, add=T, col="blue")
plot(perf_rf, add=T, col="red")
plot(perf_rf, add=T, col="red")
plot(perf_gbm, add=T, col="cyan")
abline(0, 1)
legend('bottomright', insert.1,
legend=c("GLM", "glmnet", "RF", "GBM"),
col = c('black', 'blue', 'red', 'cyan'), lty=1, lwd=2)
y_obs_test <- test_data$class %>% as.character() %>% as.numeric()
y_obs_test
yhat_rf_test <- predict(data_rf, newdata=test_data, type='prob')[, 1]
yhat_rf_test
pred_rf <- prediction(yhat_rf_test, y_obs_test)
pred_rf
performance(pred_rf, "auc")@y.values[[1]]
yhat_rf_test <- predict(data_rf, newdata=test_data, type='prob')[, '1']
pred_rf <- prediction(yhat_rf_test, y_obs_test)
performance(pred_rf, "auc")@y.values[[1]]
yhat_rf_test
binomial_deviance(y_obs_test, yhat_rf_test)
# Visualization
pairs(data.frame(y_obs=y_obs,
yhat_lm = yhat_lm,
yhat_glmnet = yhat_glmnet,
yhat_rf = yhat_rf,
yhat_gbm = yhat_gbm),
lower.panel = function(x,y) { points(x,y); abline(0, 1, col='red')},
upper.panel = panel.cor)
# Visualization
pairs(data.frame(y_obs=y_obs,
yhat_lm = yhat_lm,
yhat_glmnet = yhat_glmnet,
yhat_rf = yhat_rf,
yhat_gbm = yhat_gbm))
# Visualization
data.frame(y_obs=y_obs,
yhat_lm = yhat_lm,
yhat_glmnet = yhat_glmnet,
yhat_rf = yhat_rf,
yhat_gbm = yhat_gbm) %>%
ggpairs()
read.table("housing.data", strip.white=T)
setwd("~/ipds_kr_R_book/ch13_house_price_regression")
setwd("~/ipds_kr_R_book/ch13_house_price_regression")
read.table("housing.data", strip.white=T) %>% as_tibble()
read.table("housing.data", strip.white=T) %>% as_tibble() -> data
names(data) <- c('crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis',
'rad', 'tax', 'ptratio', 'b', 'lstat', 'medv')
glimpse(data)
summary(data)
glimpse(data)
data %>% ggpairs()
set.seed(2019)
n <- nrow(data)
nrow(data_house) -> n
1:n %>% sample(., n*.6) -> train_idx
setdiff(1:n, train_idx) -> idx_without_train
idx_without_train %>% sample(., n*.2) -> validate_idx
setdiff(idx_without_train, validation_idx) -> test_idx
train_idx %>% length()
validate_idx %>% length()
test_idx %>% length()
train_idx %>% length()
validate_idx %>% length()
test_idx %>% length()
train_data <- data_spam[train_idx, ]
validate_data <- data_spam[validate_idx, ]
test_data <- data_spam[test_idx, ]
test_data
data_lm_full <- lm(medv ~., data=train_data)
summary(data_lm_full)
train_data
train_data <- data_house[train_idx, ]
validate_data <- data_house[validate_idx, ]
test_data <- data_house[test_idx, ]
read.table("housing.data", strip.white=T) %>% as_tibble() -> data_house
names(data_house) <- c('crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis',
'rad', 'tax', 'ptratio', 'b', 'lstat', 'medv')
glimpse(data_house)
summary(data_house)
data_house %>% ggpairs()
set.seed(2019)
nrow(data_house) -> n
1:n %>% sample(., n*.6) -> train_idx
setdiff(1:n, train_idx) -> idx_without_train
idx_without_train %>% sample(., n*.2) -> validate_idx
setdiff(idx_without_train, validation_idx) -> test_idx
train_idx %>% length()
validate_idx %>% length()
test_idx %>% length()
train_data <- data_house[train_idx, ]
validate_data <- data_house[validate_idx, ]
test_data <- data_house[test_idx, ]
data_lm_full <- lm(medv ~., data=train_data)
summary(data_lm_full)
predict(data_lm_full, newdata=data_house(1:5, ))
predict(data_lm_full, newdata=data_house[1:5, ]
predict(data_lm_full, newdata=data_house[1:5, ])
plot(data_lm_full)
data_lm_full_2 <- lm(medv ~.^2, data=training)
data_lm_full_2 <- lm(medv ~.^2, data=train_data)
summary(data_lm_full_2)
length(coef(data_lm_full_2))
library(MASS)
data_step <- step(data_lm_full_2, scope=list(upper=~.^2, lower=-1))
data_step <- step(data_lm_full, scope=list(upper=~.^2, lower=-1))
data_step <- step(data_lm_full, scope=list(upper = ~.^2, lower= ~1))
data_step
anova(data_step)
summary(data_step)
length(coef(data_step))
?rmse
y_obs <- validation$medv
y_obs <- validate_data$medv
yhat_lm <- predict(data_lm_full, newdata=validate_data)
yhat_lm_2 <- predict(data_lm_full_2, newdata=validate_data)
yhat_step <- predict(data_step, newdata=validate_data)
rmse(y_obs, yhat_lm)
library(modelr)
rmse(y_obs, yhat_lm)
rmse(yhat_lm, y_obs)
rmse(data_lm, y_obs)
rmse(data_lm_full, y_obs)
rmse(data_lm_full, validate_data)
rmse(data_lm_full_2, validate_data)
rmse(yhat_step, validate_data)
rmse(data_step, validate_data)
xx <- model.matrix(medv ~.^2-1. data)
xx <- model.matrix(medv ~. ^2-1. data)
xx <- model.matrix(medv ~. ^2-1. data)
xx <- model.matrix(medv ~. ^2-1, data)
xx
x <- xx[train_idx, ]
y <- train_data$medv
glimpse(x)
data_cvfit <- cv.glmnet(x, y)
plot(data_cvfit)
coef(data_cvfit, s = c("lambda.1se"))
coef(data_cvfit, s = c("lambda.min"))
data_cvfit_es <- cv.glmnet(x, y, alpha=.5)
plot(data_cvfit_es)
coef(data_cvfit_es, s = c("lambda.1se"))
coef(data_cvfit_es, s = c("lambda.min"))
predict.cv.glmnet(data_cvfit, s = "lambda.min", newx = x[1:5, ])
y_obs <- vaidate_data$medv
y_obs <- validate_data$medv
y_obs
yhat_glmnet <- predict(data_cvfit, s = "lambda.min", newx=xx[validate_idx, ])
yhat_glmnet
yhat_glmnet <- yhat_glmnet[, 1]
rmse(data_cvfit, xx[validate_idx])
rmse(data_cvfit, xx[validate_idx, ])
data.frame(y_obs, yhat_glmnet)
data.frame(y_obs, yhat_glmnet) %>%
as_tibble() %>%
mutate(residue = y_obs - yhat_glmnet)
data.frame(y_obs, yhat_glmnet) %>%
as_tibble() %>%
mutate(residue = y_obs - yhat_glmnet) %>%
mutate(sq_residue  - residue^2)
data.frame(y_obs, yhat_glmnet) %>%
as_tibble() %>%
mutate(residue = y_obs - yhat_glmnet) %>%
mutate(sq_residue  = residue^2)
data.frame(y_obs, yhat_glmnet) %>%
as_tibble() %>%
mutate(residue = y_obs - yhat_glmnet) %>%
mutate(sq_residue  = residue^2) %>%
mutate(sqrt_sq_residue = sqrt(sq_residue))
data.frame(y_obs, yhat_glmnet) %>%
as_tibble() %>%
mutate(residue = y_obs - yhat_glmnet) %>%
mutate(sq_residue  = residue^2)
data.frame(y_obs, yhat_glmnet) %>%
as_tibble() %>%
mutate(residue = y_obs - yhat_glmnet) %>%
mutate(sq_residue  = residue^2) %>%
summarise(mean.sum.sq_residue = sum(sq_residue)/nrow(.))
data.frame(y_obs, yhat_glmnet) %>%
as_tibble() %>%
mutate(residue = y_obs - yhat_glmnet) %>%
mutate(sq_residue  = residue^2) %>%
summarise(mean.sum.sq_residue = sum(sq_residue)/nrow(.)) %>%
mutate(rmse = sqrt(mean.sum.sq_residue))
rmse(data_step, validate_data)
data.frame(y_obs, yhat_glmnet) %>%
as_tibble() %>%
mutate(residue = y_obs - yhat_glmnet) %>%
mutate(sq_residue  = residue^2) %>%
summarise(mean.sum.sq_residue = sum(sq_residue)/nrow(.)) %>%
mutate(rmse = sqrt(mean.sum.sq_residue))
data_tr <- rpart(medv ~., data=train_data)
data_tr
predict(data_tr, newdata = validate_data)
yhat_tr <- predict(data_tr, newdata = validate_data)
rmse(data_tr, validate_data)
set.seed(2019)
data_rf <- randomForest(medv ~., train_data)
data_rf
plot(data_rf)
varImpPlot(data_rf)
yhat_rf <- predict(data_rf, newdata = validate_data)
rmse(data_rf, validate_data)
set.seed(2019)
data_gbm <- gbm(medv ~., data=train_data,
n.trees=40000, cv.folds = 3,
verbose = T)
(best_iter = gbm.perf(data_gbm, method="cv"))
yhat_gbm <- predict(data_gbm, n.trees=best_iter, newdata=validate_data)
rmse(data_gbm, validate_data)
rmse(data_rf, validate_data)
data.frame(y_obs, yhat_glmnet) %>%
as_tibble() %>%
mutate(residue = y_obs - yhat_glmnet) %>%
mutate(sq_residue  = residue^2) %>%
summarise(mean.sum.sq_residue = sum(sq_residue)/nrow(.)) %>%
mutate(rmse = sqrt(mean.sum.sq_residue)) -> df.rmse_glmnet
df.rmse_glmnet
df.rmse_glmnet$rmse
data.frame(
method = c("lm", "glm", "rf", "gbm"),
rmse = c(rmse(data_step, validate_data),
df.rmse_glmnet$rmse,
rmse(data_rf, validate_data),
rmse(data_rf, validate_data))
)
data.frame(
method = c("lm", "glm", "rf", "gbm"),
rmse = c(rmse(data_step, validate_data),
df.rmse_glmnet$rmse,
rmse(data_rf, validate_data),
rmse(data_gbm, validate_data))
)
data.frame(
method = c("lm", "glm", "dt", "rf", "gbm"),
rmse = c(rmse(data_step, validate_data),
df.rmse_glmnet$rmse,
rmse(data_tr, validate_data)
rmse(data_rf, validate_data),
rmse(data_gbm, validate_data))
)
data.frame(
method = c("lm", "glm", "dt", "rf", "gbm"),
rmse = c(rmse(data_step, validate_data),
df.rmse_glmnet$rmse,
rmse(data_tr, validate_data),
rmse(data_rf, validate_data),
rmse(data_gbm, validate_data))
)
yhat_gbm
# Residue Boxplot....
y_obs
residue_lm <- y_obs - yhat_step
residue_lm
residue_glmnet <- y_obs  - yhat_glmnet
residue_tr <- y_obs - yhat_tr
residue_tr
residue_rf <- y_obs - yhat_rf
residue_gbm <- y_obs - yhat_gbm
residue_gbm
tibble(residue_lm, residue_gbm, residue_tr, residue_rf, residue_gbm)
data.frame(residue_lm, residue_gbm, residue_tr, residue_rf, residue_gbm)
data.frame(residue_lm, residue_gbm, residue_tr, residue_rf, residue_gbm) %>%
t()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
t()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm)
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
ggplot(aes(residue_lm)) + geom_boxplot()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
ggplot(aes(group=residue_lm)) + geom_boxplot()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
ggplot(aes("residue_lm")) + geom_boxplot()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
ggplot(aes(residue_gbm)) + geom_boxplot()
residue_rf <- y_obs - y, hat_rf
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
ggplot(aes("", residue_gbm)) + geom_boxplot()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
gather()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
gather() %>% View()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
gather() %>%
ggplot(aes(key, value)) + geom_boxplot()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
gather() %>%
ggplot(aes(key, value, fill="key")) + geom_boxplot()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
gather() %>%
ggplot(aes(key, value, col=ley)) + geom_boxplot()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
gather() %>%
ggplot(aes(key, value, col=key)) + geom_boxplot()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
gather() %>%
ggplot(aes(key, value, col=key)) + geom_boxplot() + geom_jitter()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
gather() %>%
ggplot(aes(key, value, col=key)) + geom_boxplot(alpha=,5) + geom_jitter()
data.frame(residue_lm, residue_glmnet, residue_tr, residue_rf, residue_gbm) %>%
as_tibble() %>%
gather() %>%
ggplot(aes(key, value, col=key)) + geom_boxplot(alpha=.5) + geom_jitter()
con <- dbConnect(
MySQL(),
user = "root",
password = "chr0n3!7!"
)
dbSendQuery(con, "CREATE DATABASE house_price;")
dbSendQuery(con, "USE house_price;")
dbWriteTable(con, "data_house", data, overwrite = T)
dbDisconnect(con)
con_house_price <- dbConnect(
MySQL(),
user = "root",
password = "chr0n3!7!",
dbname = "house_price"
)
con_house_price
data_from_db <- dbGetQuery(con_house_price, "select * from house_price;")
data_from_db <- dbGetQuery(con_house_price, "select * from data_house;")
data_from_db
data_from_db %>% colnames()
data_from_db %>% select(-row_names) -> data_house
data_house %>% glimpse()
iris
iris %>%
select(contains("Sepal"))
library(tidyverse)
iris %>%
select(contains("Sepal"))
iris
iris %>%
as_tibble() %>%
select(contains("Sepal"))
