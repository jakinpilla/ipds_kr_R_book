system.time(y <- do.call(rbind, x))
system.time(rbindlist(x))
system.time(y<- rbindlist(x))
y
library(foreach)
return(i)
foreach(i = 1:5) %do% {
return(i)
}
return(i)
foreach(i=1:5, .combine = c) %do% {
return(i)
}
return(i)
foreaxh(i=1:5, .combine = rbind) %do% {
return(i)
}
foreach(i=1:5, .combine = rbind) %do% {
return(i)
}
foreach(i=1:5, .combine = rbind) %do% {
return(data.frame(i))
}
foreach(i=1:5, .combine = rbind) %do% {
return(data.frame(val = i))
}
foreach(i=1:5, .combine = cbind) %do% {
return(data.frame(val = i))
}
library(doParallel)
registerDoParallel(cores = 4)
library(plyr)
big_data <- data.frame(
value = runif(NROW(LETTERS)*2000000),
group = rep(LETTERS, 2000000)
)
dlply(big_data, .(group), function(x) [
mean(x$value), .parallel =T
])
dlply(big_data, .(group), function(x) {
mean(x$value), .parallel =T
})
dlply(big_data, .(group), function(x) {
mean(x$value), .parallel =T})
dlply(big_data, .(group), function(x) {
mean(x$value)}, .parallel =T)
library(tidyverse)
rmse <- function(yhat, y_obs) {
(y_obs - yhat)^2 %>%
mean() %>%
sqrt()
}
yhat <- c(1, 2, 3)
y_obs <- c(1.3, 2.1, 3.5)
rmse(yhat, y_obs)
setwd("~/ipds_kr_R_book/ch13_house_price_regression/excercise")
train_data <- read_csv('train.csv')
train_data
train_data
train_data %>% dim()
train_data %>% str()
train_data %>% colnames()
train_data[[2]]
train_data %>%
summarise(n_na = nrow(is.na(.)))
train_data[, 1] %>% filter(is.na(.)) %>% nrow()
train_data %>% as_tibble() -> train_data
na_c <- c()
for (i in 1:ncol(train_data)) {
n_na_ith <- train_data[, i] %>% filter(is.na(.)) %>% nrow()
na_c <- c(na_c, n_na_ith)
}
names(na_c) <- colnames(train_data)
na_c
# 각 열에 포함된 na의 갯수는 몇 개인가??
train_data[[1]]
train_data %>% map(~length(.x))
vec.n_na <- train_data %>% map(~sum(is.na(.x))) %>% unlist()
vec.n_na %>% sort() %>% rev() %>% enframe() -> df
df %>%
filter(value != 0) -> df_1
df_1$name <- factor(df_1$name, levels = rev(df_1$name))
df_1 %>% str()
df_1 %>% ggplot(aes(name, value)) + geom_bar(stat = 'identity') + coord_flip()
col_has_na <- df_1$name %>% as.character()
train_data[, col_has_na] %>%
select_if(is.numeric) %>%
colnames() -> num_has_na_col_nm
train_data %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(., na.rm = T), .))) -> train_data_1
train_data[, num_has_na_col_nm]
train_data_1[, num_has_na_col_nm]
train_data_1 %>%
mutate_if(is.character, list(~ifelse(is.na(.), "NA", .))) -> train_data_2
train_data[, col_has_na] %>% select_if(is.character)
train_data_2[, col_has_na] %>% select_if(is.character)
train_data_2 %>% summary()
train_data_2 %>% map_int(~sum(is.na(.x)))
df <- train_data_2
colnames(df) <- tolower(colnames(df))
colnames(df)
cor_mat <- df %>% select_if(is.numeric) %>% cor()
cor_mat %>%
as_tibble() %>%
mutate(var_nm = colnames(.)) %>%
select(var_nm, dplyr::everything()) %>%
gather(variable, value, -var_nm) %>%
# filter(value >= .5) %>%
filter(var_nm != variable) -> high_cor_mat_df
cor_mat %>% row.names()
high_cor_mat_df %>%
arrange(desc(value)) %>%
filter(grepl("sale", var_nm)) -> cor_df_with_saleprice
cor_df_with_saleprice$variable <- factor(cor_df_with_saleprice$variable,
levels = rev(cor_df_with_saleprice$variable))
cor_df_with_saleprice %>% str()
cor_df_with_saleprice %>%
ggplot(aes(variable, value)) + geom_bar(stat = 'identity') +
coord_flip()
cor_df_with_saleprice %>%
mutate(variable = as.character(variable)) %>%
filter(value >= .3) %>% pull(variable) -> vec_1
nm <- c('saleprice', vec_1)
cor_mat_1 <- cor_mat[nm, nm]
library(corrgram)
library(corrplot)
corrgram::corrgram(cor_mat_1, order = T, upper.panel = panel.cor)
# corrgram::corrgram(cor_mat_1, order = T, upper.panel = panel.cor)
corrplot::corrplot(cor_mat_1, cl.offset = .9)
df_1 <- df %>% mutate_if(is.character, as.factor)
glimpse(df_1)
df_1 %>% str()
# model.matrix...
model.matrix(df_1)
?model.matrix
# model.matrix...
model.matrix(~. data = df_1)
# model.matrix...
model.matrix(~., data = df_1)
# model.matrix...
mat_df <- model.matrix(~., data = df_1)
mat_df %>% as_tibble()
df_from_mat <- mat_df %>% as_tibble()
df_from_mat
df_from_mat %>% dim()
train_idx <- createDataPartition(df_from_mat$saleprice, p = .8, list = F)[, 1]
library(caret)
train_idx <- createDataPartition(df_from_mat$saleprice, p = .8, list = F)[, 1]
train_idx
val_idx <- setdiff(1:nrow(df_from_mat), train_idx)
val_idx
train_idx %>% length()
val_idx %>% length()
train_set <- df_1[train_idx, ]
train_set %>% dim()
val_set <- df_1[val_idx, ]
val_set %>% dim()
train_set <- df_from_mat_from_mat_1[train_idx, ]
train_set %>% dim()
train_set <- df_from_mat_1[train_idx, ]
train_set %>% dim()
val_set <- df_from_mat_1[val_idx, ]
val_set %>% dim()
train_idx <- createDataPartition(df_from_mat$saleprice, p = .8, list = F)[, 1]
val_idx <- setdiff(1:nrow(df_from_mat), train_idx)
train_idx %>% length()
val_idx %>% length()
train_set <- df_from_mat[train_idx, ]
train_set %>% dim()
val_set <- df_from_mat[val_idx, ]
val_set %>% dim()
train_set %>% str()
val_set %>% str()
library(caret)
train_idx <- createDataPartition(df_from_mat$saleprice, p = .8, list = F)[, 1]
val_idx <- setdiff(1:nrow(df_from_mat), train_idx)
train_idx %>% length()
val_idx %>% length()
train_set <- df_from_mat[train_idx, ]
train_set %>% dim()
val_set <- df_from_mat[val_idx, ]
val_set %>% dim()
train_set %>% str()
val_set %>% str()
train_set %>% glimpse()
val_set %>% glimpse()
train_set %>% str()
val_set %>% str()
## modeling...
m_lm <- lm(saleprice ~ ., data = train_set)
summary(m_lm)
m_lm %>% coef() %>% length()
## prediction....
predict(m_lm, val_set)
# 변수선택... stepwise...
library(MASS)
df_from_mat_step <- stepAIC(m_lm, scope = list(upper = ~ ., lower = ~1))
df_from_mat_step %>% coef() %>% length()
m_lm %>% coef() %>% length()
val_set
m_lm
df_from_mat_step
predict(m_lm, newdata = val_set)
val_set$roofmatl %>% table()
train_set$roofmatl %>% table()
summary(m_lm)
yhat_lm <- predict(m_lm, newdata = val_set)
y_obs <- val_set$saleprice
rmse(yhat_lm, y_obs)
yhat_step <- predict(df_from_mat_step, newdata = val_set)
yhat_step
rmse(yhat_step, y_obs)
rmse(yhat_lm, y_obs)
rmse(yhat_step, y_obs)
summary(m_lm)
summary(df_from_mat_step)
test <- read_csv('test.csv')
colnames(test) <- tolower(colnames(test))
test %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(.), .))) -> test_1
test_1 %>%
mutate_if(is.character, list(~ifelse(is.na(.), "NA", .))) -> test_2
test_2 %>%
mutate_if(is.character, as.factor) -> df_from_mat_test
df_from_mat_test %>% colnames() -> nm_1
train_set %>% colnames() -> nm_2
setdiff(nm_1, nm_2)
setdiff(nm_2, nm_1)
df_from_mat_test
model.matrix(~., df_from_mat_test)
model.matrix(~., df_from_mat_test) %>% as_tibble()
model.matrix(~., df_from_mat_test) %>% as_tibble()
model.matrix(~., df_from_mat_test) %>% as_tibble() -> df_test
predict(df_from_mat_step, df_test)
df_test[, -c('utilitiesNoSeWa')]
df_test %>%
select(-utilitiesNoSeSeWa)
df_test %>%
dplyr::select(-utilitiesNoSeSeWa)
test %>% colnames()
train_data <- read_csv('train.csv')
train_data
train_data %>% dim()
train_data %>% str()
df_test %>%
dplyr::select(-utilitiesNoSeWa)
# NA...
train_data[, 1] %>% filter(is.na(.)) %>% nrow()
train_data %>% as_tibble() -> train_data
# NA...
na_c <- c()
for (i in 1:ncol(train_data)) {
n_na_ith <- train_data[, i] %>% filter(is.na(.)) %>% nrow()
na_c <- c(na_c, n_na_ith)
}
names(na_c) <- colnames(train_data)
na_c
# 각 열에 포함된 na의 갯수는 몇 개인가??
vec.n_na <- train_data %>% map(~sum(is.na(.x))) %>% unlist()
vec.n_na %>% sort() %>% rev() %>% enframe() -> df
vec.n_ca
# 각 열에 포함된 na의 갯수는 몇 개인가??
vec.n_na <- train_data %>% map(~sum(is.na(.x))) %>% unlist()
vec.n_ca
# 각 열에 포함된 na의 갯수는 몇 개인가??
vec.n_na <- train_data %>% map(~sum(is.na(.x))) %>% unlist()
vec.n_na
vec.n_na %>% sort() %>% rev() %>% enframe() -> df
df %>%
filter(value != 0) -> df_1
df_1
df_1$name <- factor(df_1$name, levels = rev(df_1$name))
df_1 %>% str()
df_1 %>% ggplot(aes(name, value)) + geom_bar(stat = 'identity') + coord_flip()
col_has_na <- df_1$name %>% as.character()
train_data[, col_has_na] %>%
select_if(is.numeric) %>%
colnames() -> num_has_na_col_nm
train_data %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(., na.rm = T), .))) -> train_data_1
train_data[, num_has_na_col_nm]
train_data_1[, num_has_na_col_nm]
train_data_1 %>%
mutate_if(is.character, list(~ifelse(is.na(.), "NA", .))) -> train_data_2
train_data[, col_has_na] %>% select_if(is.character)
train_data_2[, col_has_na] %>% select_if(is.character)
train_data_2 %>% summary()
train_data_2 %>% map_int(~sum(is.na(.x)))
df <- train_data_2
colnames(df) <- tolower(colnames(df))
colnames(df)
cor_mat <- df %>% select_if(is.numeric) %>% cor()
cor_mat
read_csv('test.csv')
test_data <- read_csv('test.csv')
test_data %>% colnames()
train_col_nm <- train_data_2
train_col_nm <- train_data_2 %>% colnames()
train_col_nm
test_col_nm <- test_data %>% colnames()
setdiff(train_col_nm, test_col_nm)
train_col_nm <- train_data_2 %>% colnames() %>% tolower()
test_col_nm <- test_data %>% colnames() %>% tolower()
setdiff(train_col_nm, test_col_nm)
setdiff( test_col_nm, train_col_nm)
colnames(train_data_2) <- train_col_nm
colnames(test_data) <- test_col_nm
setdiff(train_col_nm, test_col_nm)
setdiff(test_col_nm, train_col_nm)
test_data %>%
mutate(saleprice = 0)
test_data %>%
mutate(saleprice = 0) -> test_data_0
train_data_2 %>%
bind_rows(test_data)
test_data_0 %>% mutate(cate = 'test') -> test_data_1
train_data_2 %>% mutate(cate = 'train') -> train_data_3
train_data_3
train_data_3 %>%
bind_rows(test_data_1)
train_data_3 %>%
bind_rows(test_data_1) -> total_data
total_data %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(., na.rm = T), .)))
total_data %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(., na.rm = T), .))) %>%
mutate_if(is.chracter, list(~ifelse(is.na(.), "NA", .)))
total_data %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(., na.rm = T), .))) %>%
mutate_if(is.character, list(~ifelse(is.na(.), "NA", .)))
total_data %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(., na.rm = T), .))) %>%
mutate_if(is.character, list(~ifelse(is.na(.), "NA", .))) -> total_data_1
model.matrix(~., total_data_1)
model.matrix(~., total_data_1) %>% as_tibble()
model.matrix(~., total_data_1) %>% as_tibble() %>% View()
model.matrix(~., total_data_1) %>% as_tibble() -> total_data_2
total_data_2 %>% filter(catetrain == 1)
total_data_2 %>% filter(catetrain == 1) -> train_data_4
total_data_2 %>% filter(catetrain == 0)
total_data_2 %>% filter(catetrain == 0) -> test_data_4
df <- train_data_2
df
cor_mat <- df %>% select_if(is.numeric) %>% cor()
cor_mat
cor_mat %>%
as_tibble() %>%
mutate(var_nm = colnames(.)) %>%
select(var_nm, dplyr::everything()) %>%
gather(variable, value, -var_nm) %>%
# filter(value >= .5) %>%
filter(var_nm != variable) -> high_cor_mat_df
cor_mat
cor_mat %>%
as_tibble() %>%
mutate(var_nm = colnames(.)) %>%
select(var_nm, dplyr::everything()) %>%
gather(variable, value, -var_nm) %>%
# filter(value >= .5) %>%
filter(var_nm != variable) -> high_cor_mat_df
cor_mat %>%
as_tibble() %>%
mutate(var_nm = colnames(.)) %>%
dplyr::select(var_nm, dplyr::everything()) %>%
gather(variable, value, -var_nm) %>%
# filter(value >= .5) %>%
filter(var_nm != variable) -> high_cor_mat_df
cor_mat %>% row.names()
high_cor_mat_df %>%
arrange(desc(value)) %>%
filter(grepl("sale", var_nm)) -> cor_df_with_saleprice
cor_df_with_saleprice$variable <- factor(cor_df_with_saleprice$variable,
levels = rev(cor_df_with_saleprice$variable))
cor_df_with_saleprice %>% str()
cor_df_with_saleprice %>%
ggplot(aes(variable, value)) + geom_bar(stat = 'identity') +
coord_flip()
cor_df_with_saleprice %>%
mutate(variable = as.character(variable)) %>%
filter(value >= .3) %>% pull(variable) -> vec_1
nm <- c('saleprice', vec_1)
cor_mat_1 <- cor_mat[nm, nm]
library(corrgram)
library(corrplot)
# corrgram::corrgram(cor_mat_1, order = T, upper.panel = panel.cor)
corrplot::corrplot(cor_mat_1, cl.offset = .9)
test_data <- read_csv('test.csv')
test_data %>% colnames()
train_col_nm <- train_data_2 %>% colnames() %>% tolower()
test_col_nm <- test_data %>% colnames() %>% tolower()
setdiff(train_col_nm, test_col_nm)
setdiff(test_col_nm, train_col_nm)
colnames(train_data_2) <- train_col_nm
colnames(test_data) <- test_col_nm
test_data %>%
mutate(saleprice = 0) -> test_data_0
test_data_0 %>% mutate(cate = 'test') -> test_data_1
train_data_2 %>% mutate(cate = 'train') -> train_data_3
train_data_3 %>%
bind_rows(test_data_1) -> total_data
total_data %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(., na.rm = T), .))) %>%
mutate_if(is.character, list(~ifelse(is.na(.), "NA", .))) -> total_data_1
model.matrix(~., total_data_1) %>% as_tibble() -> total_data_2
total_data_2 %>% filter(catetrain == 1) -> train_data_4
total_data_2 %>% filter(catetrain == 0) -> test_data_4
library(caret)
train_idx <- createDataPartition(df_from_mat$saleprice, p = .8, list = F)[, 1]
train_idx <- createDataPartition(train_data_4$saleprice, p = .8, list = F)[, 1]
val_idx <- setdiff(1:nrow(train_data_4), train_idx)
train_idx %>% length()
val_idx %>% length()
train_set <- train_data_4[train_idx, ]
train_set %>% dim()
val_set <- train_data_4[val_idx, ]
val_set %>% dim()
train_set %>% str()
val_set %>% str()
train_set %>% glimpse()
val_set %>% glimpse()
train_set %>% str()
val_set %>% str()
## modeling...
m_lm <- lm(saleprice ~ ., data = train_set)
summary(m_lm)
m_lm %>% coef() %>% length()
## prediction....
predict(m_lm, val_set)
m_step <- stepAIC(m_lm, scope = list(upper = ~ ., lower = ~1))
val_set
m_lm
df_from_mat_step
yhat_lm <- predict(m_lm, newdata = val_set)
y_obs <- val_set$saleprice
rmse(yhat_lm, y_obs)
total_data_2 %>% filter(catetrain == 1) %>%
dplyr::select(-catetrain) -> train_data_4
train_data_4
total_data_2 %>% filter(catetrain == 0) %>%
dplyr::select(catetrain) -> test_data_4
train_data_4 %>% dim()
test_data_4 %>% dim()
library(caret)
train_idx <- createDataPartition(train_data_4$saleprice, p = .8, list = F)[, 1]
val_idx <- setdiff(1:nrow(train_data_4), train_idx)
train_idx %>% length()
val_idx %>% length()
train_set <- train_data_4[train_idx, ]
train_set %>% dim()
val_set <- train_data_4[val_idx, ]
val_set %>% dim()
train_set %>% str()
val_set %>% str()
train_set %>% glimpse()
val_set %>% glimpse()
train_set %>% str()
val_set %>% str()
## modeling...
m_lm <- lm(saleprice ~ ., data = train_set)
summary(m_lm)
m_lm %>% coef() %>% length()
## prediction....
predict(m_lm, val_set)
m_step %>% coef() %>% length()
m_lm %>% coef() %>% length()
val_set
m_lm
df_from_mat_step
v
m_step
yhat_lm <- predict(m_lm, newdata = val_set)
y_obs <- val_set$saleprice
rmse(yhat_lm, y_obs)
yhat_step <- predict(m_step, newdata = val_set)
rmse(yhat_step, y_obs)
summary(m_lm)
summary(m_step)
test_data
test_data_4
total_data_2 %>% filter(catetrain == 0) %>%
dplyr::select(-catetrain) -> test_data_4
train_data_4 %>% dim()
test_data_4 %>% dim()
test_data_4
predict(m_step, test_data_4)
predict(m_step, test_data_4) %>%
emframe()
predict(m_step, test_data_4) %>%
enframe()
val_set %>%
select(saleprice)
val_set %>%
dplyr::select(saleprice)
val_set %>%
dplyr::select(saleprice) %>%
mutate(yhat_val = predict(m_step, val_set))
train_set
val_set
test_data_4
randomForest(saleprice ~ ., data = train_set)
library(randomForest)
m_rf <- randomForest(saleprice ~ ., data = train_set)
make.names(train_set)
make.names(colnames(train_set))
train_col_nm <- make.names(colnames(train_set))
test_col_nm <- make.names(colnames(test_set))
test_set <-test_data_4
test_set <- test_data_4
test_set
Rcade::games$`Pacman`
train_set
val_set
