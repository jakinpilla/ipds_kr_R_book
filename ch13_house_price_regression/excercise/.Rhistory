group_by(time, variable) %>%
summarise(mean = mean(variable))
m %>%
group_by(time, variable) %>%
summarise(mean = mean(variable, na.rm = T))
m %>%
na.omit() %>%
group_by(time, variable) %>%
summarise(mean = mean(variable, na.rm = T))
m %>% head
m %>%
na.omit()
m %>%
na.omit() %>%
group_by(time, variable)
m %>%
na.omit() %>%
group_by(time, variable) %>%
summarise(mean.value = mean(value))
m %>%
na.omit() %>%
group_by(time, variable) %>%
summarise(mean.value = mean(value)) %>%
spread(varriable, mean.value)
m %>%
na.omit() %>%
group_by(time, variable) %>%
summarise(mean.value = mean(value)) %>%
spread(variable, mean.value)
dcast(m, time ~ treatment + variable, mean, na.rm = T)
m %>%
group_by(time, treatment, variable) %>%
summarise(mean.time.treatment.variable = mean(value))
m %>%
group_by(time, treatment, variable) %>%
summarise(mean.time.treatment.variable = mean(value)) %>%
ungroup() %>%
mutate(treatment_variable = paste0(treatment, "_", variable))
m %>%
group_by(time, treatment, variable) %>%
summarise(mean.time.treatment.variable = mean(value)) %>%
ungroup() %>%
mutate(treatment_variable = paste0(treatment, "_", variable)) %>%
select(time, treatment_variable, mean.time.treatment.variable)
m %>%
group_by(time, treatment, variable) %>%
summarise(mean.time.treatment.variable = mean(value)) %>%
ungroup() %>%
mutate(treatment_variable = paste0(treatment, "_", variable)) %>%
select(time, treatment_variable, mean.time.treatment.variable) %>%
rename(variable = treatment_variable,
value = mean.time.treatment.variable)
m %>%
group_by(time, treatment, variable) %>%
summarise(mean.time.treatment.variable = mean(value)) %>%
ungroup() %>%
mutate(treatment_variable = paste0(treatment, "_", variable)) %>%
select(time, treatment_variable, mean.time.treatment.variable) %>%
rename(variable = treatment_variable,
value = mean.time.treatment.variable) %>%
spread(variable, value)
m %>%
group_by(time, treatment, variable) %>%
summarise(mean.time.treatment.variable = mean(value, na.rm = T)) %>%
ungroup() %>%
mutate(treatment_variable = paste0(treatment, "_", variable)) %>%
select(time, treatment_variable, mean.time.treatment.variable) %>%
rename(variable = treatment_variable,
value = mean.time.treatment.variable) %>%
spread(variable, value)
library(data.table)
tables()
dt.iris <- as.data.table(iris)
tables()
dt.iris[dt.iris$Species == 'setosa', ]
dt.iris[1, ]
dt.iris[1, Sepal/Length]
dt.iris[1, Sepal.Length]
dt.iris[1, list(Sepal.Length, Species)]
dt.iris[, mean(Sepal.Length)]
dt.iris[, mean(Sepal.Length - Sepal.Width)]
dt.iris[1, 1]
dt.iris[1, 1, with = F]
dt.iris[1, c('Sepal.Length')]
dt.iris[1, c('Sepal.Length'), with = F]
dt.iris[, mean(Sepal.Length), by=  'Species']
mtcars %>% str()
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
mtcars %>% str()
dt.mtcars <- as.data.table(mtcars)
dt.mtcars
dt.mtcars[, mean, by = "cyl,am"]
dt.mtcars[, mean, by = "cyl, am"]
dt.mtcars[, mean, by = "cyl"]
dt.mtcars[, mean(mpg), by = "cyl"]
dt.mtcars[, mean(mpg), by = "cyl,am"]
dt.mtcars[, mean(mpg), by = "cyl, am"]
mtcars %>% str()
mtcars$carb <- as.factor(mtcars$carb)
mtcars %>% str()
dt.mtcars <- as.data.table(mtcars)
dt.mtcars[, mean(mpg), by = "cyl,am"]
dt.mtcars[, mean(mpg), by = "cyl,am,carb"]
data.frame(x = runif(260000), y = rep(LETTERS, each = 10000))
df <- data.frame(x = runif(260000), y = rep(LETTERS, each = 10000))
dt <- as.data.table(df)
dt
setkey(dt, y)
dt[J("C"), ]
dt[J("C"), mean(x)]
dt[J("C"), list(x_mean = mean(x), x_std = ad(x))]
dt[J("C"), list(x_mean = mean(x), x_std = sd(x))]
data.table(x = runif(260000), y = rep(LETTERS, each = 10000))
dt1 <- data.table(x = runif(260000), y = rep(LETTERS, each = 10000))
dt2 <- data.table(y = c('A', 'B', 'C'), z = c('a', 'b', 'c'))
dt1[dt2, ]
setkey(dt1, y)
dt1[dt2, ]
setkey(dt2, y)
dt2[dt1, ]
system.time(dt1[d2, ])
system.time(dt1[dt2, ])
system.time(dt1[dt2, ])
df1 <- as.data.frame(dt1)
df2 <- as.data.frame(dt2)
merge(df1, df2)
system.time(merge(df1, df2))
system.time(dt1[dt2, ])
system.time(merge(df1, df2))
m <- matrix(1, nrow = 1000, ncol = 100)
m
df <- as.data.frame(m)
dt <- as.data.table(m)
dt
for (i in 1:1000) {
dt[i, V1 := i]
}
dt
dt
lapply(1:10000, function(x) {
data.frame(val = x,
val2 = 2 * x,
val3 = 2/x,
val4 = 4 * x,
val5 = 4/x)
})
x <- lapply(1:10000, function(x) {
data.frame(val = x,
val2 = 2 * x,
val3 = 2/x,
val4 = 4 * x,
val5 = 4/x)
})
system.time(y <- do.call(rbind, x))
y
system.time(y <- do.call(rbind, x))
system.time(rbindlist(x))
system.time(y<- rbindlist(x))
y
library(foreach)
return(i)
foreach(i = 1:5) %do% {
return(i)
}
return(i)
foreach(i=1:5, .combine = c) %do% {
return(i)
}
return(i)
foreaxh(i=1:5, .combine = rbind) %do% {
return(i)
}
foreach(i=1:5, .combine = rbind) %do% {
return(i)
}
foreach(i=1:5, .combine = rbind) %do% {
return(data.frame(i))
}
foreach(i=1:5, .combine = rbind) %do% {
return(data.frame(val = i))
}
foreach(i=1:5, .combine = cbind) %do% {
return(data.frame(val = i))
}
library(doParallel)
registerDoParallel(cores = 4)
library(plyr)
big_data <- data.frame(
value = runif(NROW(LETTERS)*2000000),
group = rep(LETTERS, 2000000)
)
dlply(big_data, .(group), function(x) [
mean(x$value), .parallel =T
])
dlply(big_data, .(group), function(x) {
mean(x$value), .parallel =T
})
dlply(big_data, .(group), function(x) {
mean(x$value), .parallel =T})
dlply(big_data, .(group), function(x) {
mean(x$value)}, .parallel =T)
source('~/ipds_kr_R_book/ch13_house_price_regression/excercise/ch13_exercise.R', encoding = 'UTF-8', echo=TRUE)
setwd("~/ipds_kr_R_book/ch13_house_price_regression/excercise")
source('~/ipds_kr_R_book/ch13_house_price_regression/excercise/ch13_exercise.R', encoding = 'UTF-8', echo=TRUE)
m_lm
df_step
glimpse(df_1)
library(caret)
train_idx <- createDataPartition(df_1$saleprice, p = .8, list = F)[, 1]
val_idx <- setdiff(1:nrow(df_1), train_idx)
train_idx %>% length()
val_idx %>% length()
train_set <- df_1[train_idx, ]
train_set %>% dim()
val_set <- df_1[val_idx, ]
val_set %>% dim()
test <- read_csv('test.csv')
colnames(test) <- tolower(colnames(test))
test %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(.), .))) -> test_1
test_1 %>%
mutate_if(is.character, list(~ifelse(is.na(.), "NA", .))) -> test_2
test_2 %>%
mutate_if(is.character, as.factor) -> df_test
df_test %>% colnames() -> nm_1
train_set %>% colnames() -> nm_2
setdiff(nm_1, nm_2)
setdiff(nm_2, nm_1)
identical(nm_1, nm_2) # test set에는 saleprice가 없다....
df_test %>% glimpse()
train_set %>% glimpse()
df_test %>% glimpse()
train_set %>% glimpse()
train_set %>% glimpse()
train_set %>% str()
m_lm <- lm(saleprice ~ ., data = train_set)
summary(m_lm)
m_lm %>% coef() %>% length()
# 변수선택... stepwise...
library(MASS)
df_step <- stepAIC(m_lm, scope = list(upper = ~ ., lower = ~1))
df_step %>% coef() %>% length()
m_lm %>% coef() %>% length()
val_set
m_lm
df_step
predict(m_lm, newdata = val_set)
level <- levels(train_set$condition2)
val_set$condition2 <- factor(val_set$condition2, levels = level)
predict(m_lm, newdata = val_set)
levels(val_set$condition2)
predict(m_lm, newdata = val_set)
library(tidyverse)
library(data.table)
rmse <- function(yhat, y_obs) {
(y_obs - yhat)^2 %>%
mean() %>%
sqrt()
}
yhat <- c(1, 2, 3)
y_obs <- c(1.3, 2.1, 3.5)
rmse(yhat, y_obs)
train_data <- fread('train.csv')
train_data
train_data %>% dim()
train_data %>% str()
# NA...
train_data %>%
select(Fence) %>%
filter(is.na(.)) %>% nrow()
train_data %>% colnames()
train_data[[2]]
train_data %>%
summarise(n_na = nrow(is.na(.)))
train_data[, 1] %>% filter(is.na(.)) %>% nrow()
train_data %>% as_tibble() -> train_data
na_c <- c()
for (i in 1:ncol(train_data)) {
n_na_ith <- train_data[, i] %>% filter(is.na(.)) %>% nrow()
na_c <- c(na_c, n_na_ith)
}
names(na_c) <- colnames(train_data)
na_c
# 각 열에 포함된 na의 갯수는 몇 개인가??
train_data[[1]]
train_data %>% map(~length(.x))
vec.n_na <- train_data %>% map(~sum(is.na(.x))) %>% unlist()
vec.n_na %>% sort() %>% rev() %>% enframe() -> df
df %>%
filter(value != 0) -> df_1
df_1$name <- factor(df_1$name, levels = rev(df_1$name))
df_1 %>% str()
df_1 %>% ggplot(aes(name, value)) + geom_bar(stat = 'identity') + coord_flip()
col_has_na <- df_1$name %>% as.character()
train_data[, col_has_na] %>%
select_if(is.numeric) %>%
colnames() -> num_has_na_col_nm
train_data %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(., na.rm = T), .))) -> train_data_1
train_data[, num_has_na_col_nm]
train_data_1[, num_has_na_col_nm]
train_data_1 %>%
mutate_if(is.character, list(~ifelse(is.na(.), "NA", .))) -> train_data_2
train_data[, col_has_na] %>% select_if(is.character)
train_data_2[, col_has_na] %>% select_if(is.character)
train_data_2 %>% summary()
train_data_2 %>% map_int(~sum(is.na(.x)))
df <- train_data_2
colnames(df) <- tolower(colnames(df))
colnames(df)
cor_mat <- df %>% select_if(is.numeric) %>% cor()
cor_mat %>%
as_tibble() %>%
mutate(var_nm = colnames(.)) %>%
select(var_nm, dplyr::everything()) %>%
gather(variable, value, -var_nm) %>%
# filter(value >= .5) %>%
filter(var_nm != variable) -> high_cor_mat_df
cor_mat %>% row.names()
high_cor_mat_df %>%
arrange(desc(value)) %>%
filter(grepl("sale", var_nm)) -> cor_df_with_saleprice
cor_df_with_saleprice$variable <- factor(cor_df_with_saleprice$variable,
levels = rev(cor_df_with_saleprice$variable))
cor_df_with_saleprice %>% str()
cor_df_with_saleprice %>%
ggplot(aes(variable, value)) + geom_bar(stat = 'identity') +
coord_flip()
cor_df_with_saleprice %>%
mutate(variable = as.character(variable)) %>%
filter(value >= .3) %>% pull(variable) -> vec_1
nm <- c('saleprice', vec_1)
cor_mat_1 <- cor_mat[nm, nm]
library(corrgram)
library(corrplot)
corrgram::corrgram(cor_mat_1, order = T, upper.panel = panel.cor)
corrplot::corrplot(cor_mat_1, cl.offset = .9)
df_1 <- df %>% mutate_if(is.character, as.factor)
glimpse(df_1)
library(caret)
train_idx <- createDataPartition(df_1$saleprice, p = .8, list = F)[, 1]
val_idx <- setdiff(1:nrow(df_1), train_idx)
train_idx %>% length()
val_idx %>% length()
train_set <- df_1[train_idx, ]
train_set %>% dim()
val_set <- df_1[val_idx, ]
val_set %>% dim()
train_set %>% glimpse()
val_set %>% glimpse()
train_set %>% str()
val_set %>% str()
m_lm <- lm(saleprice ~ ., data = train_set)
summary(m_lm)
m_lm %>% coef() %>% length()
val_set
m_lm
predict(m_lm, newdata = val_set)
val_set$roofmatl %>% table()
train_set$roofmatl %>% table()
predict(m_lm, newdata = val_set)
summary(m_lm)
library(tidyverse)
library(data.table)
rmse <- function(yhat, y_obs) {
(y_obs - yhat)^2 %>%
mean() %>%
sqrt()
}
yhat <- c(1, 2, 3)
y_obs <- c(1.3, 2.1, 3.5)
rmse(yhat, y_obs)
train_data <- fread('train.csv')
train_data
train_data %>% dim()
train_data %>% str()
# NA...
train_data %>%
select(Fence) %>%
filter(is.na(.)) %>% nrow()
train_data %>% colnames()
train_data[[2]]
train_data %>%
summarise(n_na = nrow(is.na(.)))
train_data[, 1] %>% filter(is.na(.)) %>% nrow()
train_data %>% as_tibble() -> train_data
na_c <- c()
for (i in 1:ncol(train_data)) {
n_na_ith <- train_data[, i] %>% filter(is.na(.)) %>% nrow()
na_c <- c(na_c, n_na_ith)
}
names(na_c) <- colnames(train_data)
na_c
# 각 열에 포함된 na의 갯수는 몇 개인가??
train_data[[1]]
train_data %>% map(~length(.x))
vec.n_na <- train_data %>% map(~sum(is.na(.x))) %>% unlist()
vec.n_na %>% sort() %>% rev() %>% enframe() -> df
df %>%
filter(value != 0) -> df_1
df_1$name <- factor(df_1$name, levels = rev(df_1$name))
df_1 %>% str()
df_1 %>% ggplot(aes(name, value)) + geom_bar(stat = 'identity') + coord_flip()
col_has_na <- df_1$name %>% as.character()
train_data[, col_has_na] %>%
select_if(is.numeric) %>%
colnames() -> num_has_na_col_nm
train_data %>%
mutate_if(is.numeric, list(~ifelse(is.na(.), median(., na.rm = T), .))) -> train_data_1
train_data[, num_has_na_col_nm]
train_data_1[, num_has_na_col_nm]
train_data_1 %>%
mutate_if(is.character, list(~ifelse(is.na(.), "NA", .))) -> train_data_2
train_data[, col_has_na] %>% select_if(is.character)
train_data_2[, col_has_na] %>% select_if(is.character)
train_data_2 %>% summary()
train_data_2 %>% map_int(~sum(is.na(.x)))
df <- train_data_2
colnames(df) <- tolower(colnames(df))
colnames(df)
cor_mat <- df %>% select_if(is.numeric) %>% cor()
cor_mat %>%
as_tibble() %>%
mutate(var_nm = colnames(.)) %>%
select(var_nm, dplyr::everything()) %>%
gather(variable, value, -var_nm) %>%
# filter(value >= .5) %>%
filter(var_nm != variable) -> high_cor_mat_df
cor_mat %>% row.names()
high_cor_mat_df %>%
arrange(desc(value)) %>%
filter(grepl("sale", var_nm)) -> cor_df_with_saleprice
cor_df_with_saleprice$variable <- factor(cor_df_with_saleprice$variable,
levels = rev(cor_df_with_saleprice$variable))
cor_df_with_saleprice %>% str()
cor_df_with_saleprice %>%
ggplot(aes(variable, value)) + geom_bar(stat = 'identity') +
coord_flip()
cor_df_with_saleprice %>%
mutate(variable = as.character(variable)) %>%
filter(value >= .3) %>% pull(variable) -> vec_1
nm <- c('saleprice', vec_1)
cor_mat_1 <- cor_mat[nm, nm]
library(corrgram)
library(corrplot)
corrgram::corrgram(cor_mat_1, order = T, upper.panel = panel.cor)
corrplot::corrplot(cor_mat_1, cl.offset = .9)
df_1 <- df %>% mutate_if(is.character, as.factor)
glimpse(df_1)
library(caret)
train_idx <- createDataPartition(df_1$saleprice, p = .8, list = F)[, 1]
val_idx <- setdiff(1:nrow(df_1), train_idx)
train_idx %>% length()
val_idx %>% length()
train_set <- df_1[train_idx, ]
train_set %>% dim()
val_set <- df_1[val_idx, ]
val_set %>% dim()
train_set %>% str()
train_set %>% str()
val_set %>% str()
train_set %>% glimpse()
val_set %>% glimpse()
train_set %>% str()
val_set %>% str()
## modeling...
m_lm <- lm(saleprice ~ ., data = train_set)
m_lm
summary(m_lm)
train_set$grlivarea
summary(m_lm)
## prediction....
predict(m_lm, val_set)
train_data <- fread('train.csv')
train_data
train_data %>% dim()
train_data %>% str()
# NA...
train_data %>%
select(Fence) %>%
filter(is.na(.)) %>% nrow()
train_data %>% colnames()
train_data[[2]]
train_data %>%
summarise(n_na = nrow(is.na(.)))
train_data <- fread('train.csv')
train_data
train_data %>% dim()
train_data %>% str()
# NA...
train_data %>%
select(Fence) %>%
filter(is.na(.)) %>% nrow()
train_data %>% colnames()
train_data[[2]]
rmse <- function(yhat, y_obs) {
(y_obs - yhat)^2 %>%
mean() %>%
sqrt()
}
yhat <- c(1, 2, 3)
y_obs <- c(1.3, 2.1, 3.5)
rmse(yhat, y_obs)
train_data <- fread('train.csv')
train_data
train_data %>% dim()
train_data %>% str()
# NA...
train_data %>%
select(Fence) %>%
filter(is.na(.)) %>% nrow()
