library(tidyverse)
setwd("C:/Users/Daniel/Documents/ipds_kr_R_book/ch11_spam/")
read.table("spambase.data", strip.white = T, sep = ",", header = F) %>%
as_tibble() -> data
names(data) <- c('word_freq_make', 'word_freq_address', 'word_freq_all', 'word_freq_3d',
'word_freq_our', 'word_freq_over', 'word_freq_remove', 'word_freq_internet', 'word_freq_order',
'word_freq_mail', 'word_freq_receive', 'word_freq_will', 'word_freq_people',
'word_freq_report', 'word_freq_addresses', 'word_freq_free', 'word_freq_business',
'word_freq_email', 'word_freq_you', 'word_freq_credit', 'word_freq_your',
'word_freq_font', 'word_freq_000', 'word_freq_money', 'word_freq_hp',
'word_freq_hpl', 'word_freq_george', 'word_freq_650', 'word_freq_lab',
'word_freq_labs', 'word_freq_telnet', 'word_freq_857', 'word_freq_data',
'word_freq_415', 'word_freq_85', 'word_freq_technology', 'word_freq_1999',
'word_freq_parts', 'word_freq_pm', 'word_freq_direct', 'word_freq_cs',
'word_freq_meeting', 'word_freq_original', 'word_freq_project', 'word_freq_re',
'word_freq_edu', 'word_freq_table', 'word_freq_conference', 'word_freq_;',
'word_freq_(', 'word_freq_[', 'word_freq_!', 'word_freq_$', 'word_freq_#',
'capital_run_length_average', 'capital_run_length_longest', 'capital_run_length_total',
'class')
con_spam <- dbConnect(
MySQL(),
user = "root",
password = "*******",
dbname = "spambase"
)
data_from_db <- dbGetQuery(con_spam, "select * from spambase;")
library(RMySQL)
con_spam <- dbConnect(
MySQL(),
user = "root",
password = "*******",
dbname = "spambase"
)
con_spam <- dbConnect(
MySQL(),
user = "root",
password = "chr0n3!7!",
dbname = "spambase"
)
data_from_db <- dbGetQuery(con_spam, "select * from spambase;")
data_from_db %>% colnames()
data_from_db %>% select(-row_names) -> data_spam
data_spam %>% glimpse()
data_spam %>%
select(1:10, 58) -> data_tmp_1
data_tmp_1 %>% nrow()
data_spam %>% select(1:10, 58) %>% sample(1000)
data_spam %>% select(1:10, 58) %>% sample_n(1000)
data_spam %>% select(1:10, 58) %>% sample_n(1000) -> data_tmp_1
pairs(data_tmp_1)
data_spam %>% select(1:10, 58) %>% sample_n(500) -> data_tmp_1
pairs(data_tmp_1)
library(GGally)
ggpairs(data_tmp_1)
data_spam %>% select(48:57, 58) %>% sample_n(500) -> data_tmp_2
data_tmp_2
ggpairs(data_tmp_2)
cor(data_spam[, -58])
cor(data_spam[, -58], as.numeric(data_spam$class))
cor(data_spam[, -58], as.numeric(data_spam$class)) %>% as_tibble()
cor(data_spam[, -58], as.numeric(data_spam$class)) %>% as.data.frame()
cor(data_spam[, -58], as.numeric(data_spam$class)) %>% as.data.frame() %>%
rename(cor = V1)
cor(data_spam[, -58], as.numeric(data_spam$class)) %>% as.data.frame() %>%
rename(cor = V1) -> tmp
tmp$var <- rownames(tmp)
tmp
tmp %>%
ggplot(aes(reorder(var, cor), cor)) +
geom_ppint() +
coord_flip()
tmp %>%
ggplot(aes(reorder(var, cor), cor)) +
geom_point() +
coord_flip()
library(gridExtra)
data_spam %>% ggplot(aes(class)) + geom_bar()
data_spam %>% ggplot(aes(class)) + geom_bar() -> p1; p1
data_spam %>% ggplot(aes(class, `char_freq_$`)) +
geom_jitter(col = 'gray') + geom_boxplot(alpha = .5) + scale_y_sqrt()
data_spam %>% ggplot(aes(class, `word_freq_$`)) +
geom_jitter(col = 'gray') + geom_boxplot(alpha = .5) + scale_y_sqrt()
data_spam$class <- as.factor(data_spam$class)
data_spam %>% ggplot(aes(class)) + geom_bar() -> p1; p1
data_spam %>% ggplot(aes(class, `word_freq_$`)) +
geom_jitter(col = 'gray') + geom_boxplot(alpha = .5) + scale_y_sqrt()
data_spam %>% ggplot(aes(class, `word_freq_$`)) +
geom_jitter(col = 'gray') + geom_boxplot(alpha = .5) + scale_y_sqrt() -> p2; p2
data_spam %>% ggplot(aes(`word_freq_$`, group=class, fill = class)) +
geom_density(alpha = .5) + scale_x_sqrt() + scale_y_sqrt()
data_spam %>% ggplot(aes(`word_freq_$`, group=class, fill = class)) +
geom_density(alpha = .5) + scale_x_sqrt() + scale_y_sqrt() -> p3; p3
data_spam %>% ggplot(aes(class, capital_run_length_longest)) +
geom_jitter(col ='gray') +
geom_boxplot(alpha = .5) +
scale_y_log10()
data_spam %>% ggplot(aes(class, capital_run_length_longest)) +
geom_jitter(col ='gray') +
geom_boxplot(alpha = .5) +
scale_y_log10() -> p4; p4
grid.arrange(p1, p2, p3, p4, ncol = 2)
data_rf <- randomForest(class ~. , data = data_spam)
library(randomForest)
data_rf <- randomForest(class ~. , data = data_spam)
old_names <- names(data_spam)
old_names
make.names(old_names)
make.names(old_names, unique = T)
new_names <- make.names(old_names, unique = T)
new_names
cbind(old_names, new_names)[old_names != new_names, ]
names(data_spam) <- new_names
data_spam
idx <- 1:nrow(data_spam)
idx
idx %>% sample()
# Data Spliting -----------------------------------------------------------
nrow(data_spam) -> n
idx <- 1:n
idx %>% sample(., n*.6)
idx %>% sample(., n*.6) -> train_data_idx
train_data_idx
setdiff(idx, train_data_idx)
1:n %>% sample(., n*.6) -> train_data_idx
train_data_idx
setdiff(1:n, train_data_idx) -> idx
idx
setdiff(1:n, train_data_idx) %>% sample(., n*.2)
setdiff(1:n, train_data_idx) %>% sample(., n*.2) -> validation_idx
validation_idx
setdiff(1:n, train_data_idx) -> idx_without_train
idx_without_train %>% sample(., n*.2)
idx_without_train %>% sample(., n*.2) -> validation_idx
setdiff(idx_without_train, validation_idx)
# Data Spliting -----------------------------------------------------------
nrow(data_spam) -> n
1:n %>% sample(., n*.6) -> train_idx
setdiff(1:n, train_idx) -> idx_without_train
idx_without_train %>% sample(., n*.2) -> validation_idx
setdiff(idx_without_train, validation_idx) -> test_idx
train_idx %>% length()
validation_idx %>% length()
test_idx %>% length()
train_data <- data_spam[train_idx, ]
train_data
validation_data <- data_spam[validation_idx, ]
test_data <- data_spam[test_idx, ]
test_data
lm_full <- glm(class ~., data = train_data, family = binomial)
summary(lm_fulll)
summary(lm_full)
y_obs <- as.numeric(as.character(validation_data$class))
y_obs
yhat_lm <- predict(lm_full, newdata = validation_data, type = 'response')
yhat_lm
# Validation --------------------------------------------------------------
library(ROCR)
pred_lm <- prediction(yhat_lm, y_obs)
pred_lm
performance(pred_lm, "auc")@y.value[[1]]
performance(pred_lm, "auc")@y.values[[1]]
binomial_deviance <- function(y_obs, yhat) {
epsilon = 0.0001
yhat = ifelse(yhat < epsilon, epsilon, yhat)
yhat = ifelse(yhat > 1- epsilon, 1-epsilon, yhat)
a = ifelse(y_obs == 0, 0, y_obs * log(y_obs/yhat))
b = ifelse(y_obs==1, 0, (1-y_obs) * log((1-y_obs)/(1-yhat)))
return((2*sum(a+b)))
}
binomial_deviance(y_obs, yhat_lm)
xx <- model.matrix(class ~.-1, data_spam)
xx
